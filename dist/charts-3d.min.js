(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3')) :
	typeof define === 'function' && define.amd ? define(['d3'], factory) :
	(global = global || self, global.Charts3D = factory(global.d3));
}(this, (function (d3) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document) && isObject(document.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var functionToString = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore.inspectSource != 'function') {
	  sharedStore.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.6.5',
	  mode:  'global',
	  copyright: 'Â© 2020 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$1 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = new WeakMap$1();
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;
	  set = function (it, metadata) {
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };
	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };
	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(String).split('String');

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  if (typeof value == 'function') {
	    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
	    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
	  }
	  if (O === global_1) {
	    if (simple) O[key] = value;
	    else setGlobal(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
	});
	});

	var path = global_1;

	var aFunction = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global_1;
	  } else if (STATIC) {
	    target = global_1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global_1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	var aFunction$1 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// optional / simple context binding
	var functionBindContext = function (fn, that, length) {
	  aFunction$1(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
	    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var SPECIES = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$1 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$1(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$1(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$1(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$1(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$1(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$1(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$1(6)
	};

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process = global_1.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  version = match[0] + match[1];
	} else if (engineUserAgent) {
	  match = engineUserAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match) version = match[1];
	  }
	}

	var engineV8Version = version && +version;

	var SPECIES$1 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$1] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var defineProperty = Object.defineProperty;
	var cache = {};

	var thrower = function (it) { throw it; };

	var arrayMethodUsesToLength = function (METHOD_NAME, options) {
	  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
	  if (!options) options = {};
	  var method = [][METHOD_NAME];
	  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
	  var argument0 = has(options, 0) ? options[0] : thrower;
	  var argument1 = has(options, 1) ? options[1] : undefined;

	  return cache[METHOD_NAME] = !!method && !fails(function () {
	    if (ACCESSORS && !descriptors) return true;
	    var O = { length: -1 };

	    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
	    else O[1] = 1;

	    method.call(O, argument0, argument1);
	  });
	};

	var $map = arrayIteration.map;



	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
	// FF49- issue
	var USES_TO_LENGTH = arrayMethodUsesToLength('map');

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	var nativeAssign = Object.assign;
	var defineProperty$1 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign = !nativeAssign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$1({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$1(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var nativeJoin = [].join;

	var ES3_STRINGS = indexedObject != Object;
	var STRICT_METHOD = arrayMethodIsStrict('join', ',');

	// `Array.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.join
	_export({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {
	  join: function join(separator) {
	    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
	  }
	});

	var draw = function draw(id, data, x
	/* center x */
	, y
	/* center y */
	, rx
	/* radius x */
	, ry
	/* radius y */
	, h
	/* height */
	, ir
	/* inner radius */
	) {
	  var dataset = d3.pie().sort(null).value(function (d) {
	    return d.value;
	  })(data);
	  var slices = d3.select("#" + id).append('g').attr('transform', "translate(" + x + "," + y + ")").attr('class', 'slices'); // ç¯å½¢åæ²é¢

	  slices.selectAll('.innerSlice').data(dataset).enter().append('path').attr('class', 'innerSlice').style('fill', function (d) {
	    return d3.hsl(d.data.color).darker(0.7);
	  }).attr('d', function (d) {
	    return pieInner(d, rx + 0.5, ry + 0.5, h, ir);
	  }).each(function (d) {
	    this._current = d;
	  }); // ä¸å±2då¹³é¢

	  slices.selectAll('.topSlice').data(dataset).enter().append('path').attr('class', 'topSlice').style('fill', function (d) {
	    return d.data.color;
	  }).style('stroke', function (d) {
	    return d.data.color;
	  }).attr('d', function (d) {
	    return pieTop(d, rx, ry, ir);
	  }).each(function (d) {
	    this._current = d;
	  }); // ä¾§é¢æ²é¢

	  slices.selectAll('.outerSlice').data(dataset).enter().append('path').attr('class', 'outerSlice').style('fill', function (d) {
	    return d3.hsl(d.data.color).darker(0.7);
	  }).attr('d', function (d) {
	    return pieOuter(d, rx - 0.5, ry - 0.5, h);
	  }).each(function (d) {
	    this._current = d;
	  });
	  slices.selectAll('.percent').data(dataset).enter().append('text').attr('class', 'percent').attr('x', function (d) {
	    return 0.6 * rx * Math.cos(0.5 * (d.startAngle + d.endAngle));
	  }).attr('y', function (d) {
	    return 0.6 * ry * Math.sin(0.5 * (d.startAngle + d.endAngle));
	  }).text(getPercent).each(function (d) {
	    this._current = d;
	  });
	  slices.selectAll('.text').data(dataset).enter().append('text').attr('class', 'text').attr('x', function (d) {// return 0.6 * rx * Math.cos(0.5 * (d.startAngle + d.endAngle));
	  }).attr('y', function (d) {// return 0.6 * ry * Math.sin(0.5 * (d.startAngle + d.endAngle+20));
	  }).text(getLabel).each(function (d) {
	    this._current = d;
	  }); // const domText = document.querySelector('#text');

	  slices.on('mousemove', function () {// console.log(d3.event);
	    // const e = d3.event;
	    // domText.style.left = e.screenX + 'px';
	    // domText.style.top = e.screenY - 400 + 'px';
	    // d3.select(this)
	    //   .transition()
	    //   .duration(1500) // å½é¼ æ æ¾å¨ç©å½¢ä¸æ¶ï¼ç©å½¢åæé»è²
	    //   .attr('fill', 'yellow');
	  });
	}; // åæ²é¢

	function pieInner(d, rx, ry, h, ir) {
	  var startAngle = d.startAngle < Math.PI ? Math.PI : d.startAngle;
	  var endAngle = d.endAngle < Math.PI ? Math.PI : d.endAngle;
	  var sx = ir * rx * Math.cos(startAngle);
	  var sy = ir * ry * Math.sin(startAngle);
	  var ex = ir * rx * Math.cos(endAngle);
	  var ey = ir * ry * Math.sin(endAngle);
	  var ret = [];
	  ret.push('M', sx, sy, 'A', ir * rx, ir * ry, '0 0 1', ex, ey, 'L', ex, h + ey, 'A', ir * rx, ir * ry, '0 0 0', sx, h + sy, 'z');
	  return ret.join(' ');
	}

	function pieTop(d, rx, ry, ir) {
	  if (d.endAngle - d.startAngle === 0) return 'M 0 0';
	  var sx = rx * Math.cos(d.startAngle);
	  var sy = ry * Math.sin(d.startAngle);
	  var ex = rx * Math.cos(d.endAngle);
	  var ey = ry * Math.sin(d.endAngle);
	  var ret = [];
	  ret.push('M', sx, sy, 'A', rx, ry, '0', d.endAngle - d.startAngle > Math.PI ? 1 : 0, '1', ex, ey, 'L', ir * ex, ir * ey);
	  ret.push('A', ir * rx, ir * ry, '0', d.endAngle - d.startAngle > Math.PI ? 1 : 0, '0', ir * sx, ir * sy, 'z');
	  return ret.join(' ');
	} // å¤æ²é¢ç®æ³


	function pieOuter(d, rx, ry, h) {
	  var startAngle = d.startAngle > Math.PI ? Math.PI : d.startAngle;
	  var endAngle = d.endAngle > Math.PI ? Math.PI : d.endAngle;
	  var sx = rx * Math.cos(startAngle);
	  var sy = ry * Math.sin(startAngle);
	  var ex = rx * Math.cos(endAngle);
	  var ey = ry * Math.sin(endAngle);
	  var ret = [];
	  ret.push('M', sx, h + sy, 'A', rx, ry, '0 0 1', ex, h + ey, 'L', ex, ey, 'A', rx, ry, '0 0 0', sx, sy, 'z');
	  return ret.join(' ');
	}

	function getPercent(d) {
	  return d.endAngle - d.startAngle > 0.2 ? Math.round(1000 * (d.endAngle - d.startAngle) / (Math.PI * 2)) / 10 + "%" : '';
	}

	function getLabel(d, i) {
	  return d.data.label + i;
	}

	var transition = function transition(id, data, rx, ry, h, ir) {
	  var arcTweenInner = function arcTweenInner(a) {
	    var i = d3.interpolate(this._current, a);
	    this._current = i(0);
	    return function (t) {
	      return pieInner(i(t), rx + 0.5, ry + 0.5, h, ir);
	    };
	  };

	  var arcTweenTop = function arcTweenTop(a) {
	    var i = d3.interpolate(this._current, a);
	    this._current = i(0);
	    return function (t) {
	      return pieTop(i(t), rx, ry, ir);
	    };
	  };

	  var arcTweenOuter = function arcTweenOuter(a) {
	    var i = d3.interpolate(this._current, a);
	    this._current = i(0);
	    return function (t) {
	      return pieOuter(i(t), rx - 0.5, ry - 0.5, h);
	    };
	  };

	  var textTweenX = function textTweenX(a) {
	    var i = d3.interpolate(this._current, a);
	    this._current = i(0);
	    return function (t) {
	      return 0.6 * rx * Math.cos(0.5 * (i(t).startAngle + i(t).endAngle));
	    };
	  };

	  var textTweenY = function textTweenY(a) {
	    var i = d3.interpolate(this._current, a);
	    this._current = i(0);
	    return function (t) {
	      return 0.6 * rx * Math.sin(0.5 * (i(t).startAngle + i(t).endAngle));
	    };
	  };

	  var textTweenY2 = function textTweenY2(a) {
	    var i = d3.interpolate(this._current, a);
	    this._current = i(0);
	    return function (t) {
	      return 1.1 * rx * Math.sin(0.5 * (i(t).startAngle + i(t).endAngle));
	    };
	  };

	  var _data = d3.pie().sort(null).value(function (d) {
	    return d.value;
	  })(data);

	  d3.select("#" + id).selectAll('.innerSlice').data(_data).transition().duration(750).attrTween('d', arcTweenInner);
	  d3.select("#" + id).selectAll('.topSlice').data(_data).transition().duration(750).attrTween('d', arcTweenTop);
	  d3.select("#" + id).selectAll('.outerSlice').data(_data).transition().duration(750).attrTween('d', arcTweenOuter);
	  d3.select("#" + id).selectAll('.percent').data(_data).transition().duration(750).attrTween('x', textTweenX).attrTween('y', textTweenY).text(getPercent);
	  d3.select("#" + id).selectAll('.text').data(_data).transition().duration(750).attrTween('x', textTweenX).attrTween('y', textTweenY2).text(getLabel);
	};

	var Charts3D = /*#__PURE__*/function () {
	  function Charts3D(option) {
	    this._option = {
	      id: "id" + Date.now(),
	      type: 'pie',
	      selector: 'body'
	    };
	    this.option = Object.assign({}, this._option, option);
	    this.data = this.option.data;
	    this.option.type === 'pie' && this.drawPie();
	    this.option.type === 'test' && this.drawTest();
	  }

	  var _proto = Charts3D.prototype;

	  _proto.drawTest = function drawTest() {
	    var oriData = [{
	      x: 'Aè®¡å',
	      y: 20
	    }, {
	      x: 'Bè®¡å',
	      y: 40
	    }, {
	      x: 'Cè®¡å',
	      y: 90
	    }, {
	      x: 'Dè®¡å',
	      y: 80
	    }, {
	      x: 'Eè®¡å',
	      y: 120
	    }, {
	      x: 'Fè®¡å',
	      y: 100
	    }, {
	      x: 'Gè®¡å',
	      y: 60
	    }];
	    var width = 750,
	        height = 350;
	    var svg = d3.select('#svg6').attr('width', width).attr('height', height);
	    var g = svg.append('g').attr('transform', 'translate( 140, 40 )'); // è®¾ç½®é¥¼å¾çåå¾

	    var radius = Math.min(width, height) * 0.8 / 2;
	    var arc = d3.arc().innerRadius(70) // .outerRadius(radius)
	    .cornerRadius(10); // é¥¼å¾ä¸æå­ç¸è¿çæ²çº¿èµ·ç¹

	    var pointStart = d3.arc().innerRadius(radius).outerRadius(radius); // é¥¼å¾ä¸æå­ç¸è¿çæ²çº¿ç»ç¹

	    var pointEnd = d3.arc().innerRadius(radius + 20).outerRadius(radius + 20);
	    var drawData = d3.pie().value(function (d) {
	      return d.y;
	    }).sort(null).sortValues(null).startAngle(0).endAngle(Math.PI * 2).padAngle(0.05)(oriData);
	    console.log(drawData);
	    var colorScale = d3.scaleOrdinal().domain(d3.range(0, oriData.length)).range(d3.schemeSet1);
	    g.append('g').attr('transform', 'translate( ' + radius + ', ' + radius + ' )').attr('stroke', 'steelblue').attr('stroke-width', 1).selectAll('path').data(drawData).enter().append('path').attr('fill', function (d) {
	      return colorScale(d.index);
	    }).attr('d', function (d) {
	      d.outerRadius = radius;
	      return arc(d);
	    }).on('mouseover', arcTween(radius + 20, 0)).on('mouseout', arcTween(radius, 150)).transition().duration(2000).attrTween('d', function (d) {
	      // åå§å è½½æ¶çè¿æ¸¡ææ
	      var fn = d3.interpolate({
	        endAngle: d.startAngle
	      }, d);
	      return function (t) {
	        return arc(fn(t));
	      };
	    });

	    function arcTween(outerRadius, delay) {
	      // è®¾ç½®ç¼å¨å½æ°,ä¸ºé¼ æ äºä»¶ä½¿ç¨
	      return function () {
	        d3.select(this).transition().delay(delay).attrTween('d', function (d) {
	          var i = d3.interpolate(d.outerRadius, outerRadius);
	          return function (t) {
	            d.outerRadius = i(t);
	            return arc(d);
	          };
	        });
	      };
	    } // æå­å±
	    // const sum = d3.sum(oriData, d => d.y);
	    // svg
	    //   .append('g')
	    //   .attr('transform', 'translate( ' + radius + ', ' + radius + ' )')
	    //   .selectAll('text')
	    //   .data(drawData)
	    //   .enter()
	    //   .append('text')
	    //   .attr('transform', function(d) {
	    //     // arc.centroid(d)å°æå­å¹³ç§»å°å¼§çä¸­å¿
	    //     return (
	    //       'translate(' +
	    //       arc.centroid(d) +
	    //       ') ' +
	    //       // rotate ä½¿æå­æè½¬æå½¢å¤¹è§ä¸åçä½ç½®(ä¹å¯ä¸æè½¬)
	    //       'rotate(' +
	    //       (-90 + ((d.startAngle + (d.endAngle - d.startAngle) / 2) * 180) / Math.PI) +
	    //       ')'
	    //     );
	    //   })
	    //   // æå­å¼å§ç¹å¨æå­ä¸­é´
	    //   .attr('text-anchor', 'middle')
	    //   // æå­åç´å±ä¸­
	    //   .attr('dominant-baseline', 'central')
	    //   .attr('font-size', '10px')
	    //   // æ ¼å¼åæå­æ¾ç¤ºæ ¼å¼
	    //   .text(function(d) {
	    //     return ((d.data.y / sum) * 100).toFixed(2) + '%';
	    //   });
	    // .attr('rotate', '30') //æ­¤è®¾ç½®ä¸ºè®¾ç½®æ¯ä¸ªæå­ä¸­å­ç¬¦çæè½¬ï¼ä¸é¢çæè½¬æ¯ä»¥æå­ä¸ºä¸ä¸ªæ´ä½çæè½¬
	    // å¾ä¾legend


	    var legend = g.append('g').attr('transform', 'translate( ' + radius * 2.5 + ', 0 )').selectAll('g').data(drawData).enter().append('g').attr('transform', function (d, i) {
	      return 'translate(0,' + i * 20 + ')';
	    });
	    legend.append('rect').attr('width', 27).attr('height', 18).attr('fill', function (d) {
	      return colorScale(d.index);
	    });
	    legend.append('text').text(function (d) {
	      return d.data.x;
	    }).style('font-size', 10).attr('y', '1em').attr('x', '3em').attr('dy', 3); // æ²çº¿å±

	    g.append('g').attr('transform', 'translate( ' + radius + ', ' + radius + ' )').selectAll('path').data(drawData).enter().append('path').attr('d', d3.linkHorizontal().source(function (d) {
	      return pointStart.centroid(d);
	    }).target(function (d) {
	      return pointEnd.centroid(d);
	    })).style('stroke', 'red').style('stroke-width', 1).attr('fill', 'none'); // é¥¼å¾å¤é¢çæå­

	    g.append('g').attr('transform', 'translate( ' + radius + ', ' + radius + ' )').selectAll('path').data(drawData).enter().append('text').text(function (d) {
	      return d.data.x;
	    }).attr('x', function (d) {
	      return pointEnd.centroid(d)[0];
	    }).attr('y', function (d) {
	      return pointEnd.centroid(d)[1];
	    }).style('font-size', 10).attr('text-anchor', function (d) {
	      if (d.startAngle > Math.PI) {
	        return 'end';
	      }
	    }).attr('dominant-baseline', function (d) {
	      if (d.index === 4) {
	        return 'hanging';
	      }
	    }); // æµè¯æå­

	    /* svg.append('g')
	      .append('text')
	      .text('welcome to Beijing')
	      .attr('dominant-baseline', 'hanging')
	      .attr('transform', 'translate( 30, 30 ) rotate(0)')
	      .style('font-style', 'italic')
	      .attr('rotate', 12)
	      */
	    // æµè¯arc
	    // let arc = d3.arc()
	    //   .innerRadius(0)
	    //   .outerRadius(100)
	    //   .startAngle(0)
	    //   .endAngle(Math.PI/2)
	    //   .cornerRadius(10)
	    // svg.append('g')
	    //   .attr('transform', 'translate( 200, 200 )')
	    //   .append('path')
	    //   .attr('fill', 'none')
	    //   .attr('stroke', 'steelblue')
	    //   .attr('stroke-width', 1.5)
	    //   .attr('stroke-linejoin', 'round')
	    //   .attr('stroke-linecap', 'round')
	    //   .attr('d', arc)
	    // d3.select('button').style('color', 'red');
	    // const d3Obj = d3.select('#test');
	    // d3Obj.selectAll('svg').remove();
	    // const width = 400;
	    //
	    // const height = 400;
	    //
	    // const svg = d3Obj
	    //   .append('svg')
	    //   .attr('width', width)
	    //   .attr('height', height);
	    //
	    // const marge = { top: 0, bottom: 60, left: 0, right: 60 };
	    //
	    // const g = svg
	    //   .append('g')
	    //   .attr('id', this.option.id)
	    //   .attr('transform', `translate(${marge.top},${marge.left})`);
	    // const dataset = [30, 10, 43, 10, 13]; // éè¦å°è¿äºæ°æ®åæé¥¼ç¶å¾çæ°æ®
	    //
	    // // è®¾ç½®ä¸ä¸ªcolorçé¢è²æ¯ä¾å°ºï¼ä¸ºäºè®©ä¸åçæå½¢åç°ä¸åçé¢è²
	    // const colorScale = d3
	    //   .scaleOrdinal()
	    //   .domain(d3.range(dataset.length))
	    //   .range(d3.schemeCategory10);
	    //
	    // const pie = d3.pie();
	    // const pieData = pie(dataset);
	    //
	    // console.log(pieData);
	    //
	    // // æ°å»ºä¸ä¸ªå¼§å½¢çæå¨
	    // // const innerRadius = 0; // ååå¾
	    // // const outerRadius = 100; // å¤åå¾
	    // const arcGenerator = d3
	    //   .arc()
	    //   .innerRadius(0)
	    //   .outerRadius(100);
	    //
	    // // å¼å§ç»å¶ï¼èè§ç©ï¼åä¸ºæ¯ä¸ä¸ªæå½¢åå¶å¯¹åºçæå­å»ºç«ä¸ä¸ªåç»<g>
	    // const gs = g
	    //   .selectAll('.g')
	    //   .data(pieData)
	    //   .enter()
	    //   .append('g')
	    //   .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')'); // ä½ç½®ä¿¡æ¯
	    //
	    // // ç»å¶é¥¼ç¶å¾çåä¸ªæå½¢
	    // gs.append('path')
	    //   .attr('d', function(d) {
	    //     return arcGenerator(d); // å¾å¼§å½¢çæå¨ä¸­åºå¥æ°æ®
	    //   })
	    //   .attr('fill', function(d, i) {
	    //     return colorScale(i); // è®¾ç½®é¢è²
	    //   });
	    //
	    // // ç»å¶é¥¼ç¶å¾ä¸é¢çæå­ä¿¡æ¯
	    // gs.append('text')
	    //   .attr('transform', function(d) {
	    //     // ä½ç½®è®¾å¨ä¸­å¿å¤
	    //     return 'translate(' + arcGenerator.centroid(d) + ')';
	    //   })
	    //   .attr('text-anchor', 'middle')
	    //   .attr('x', () => {
	    //     return 0;
	    //   })
	    //   .text(function(d) {
	    //     return d.data;
	    //   })
	    //   .transition()
	    //   .delay(1000)
	    //   .duration(1000)
	    //   // .ease(d3.easeElasticInOut)
	    //
	    //   .attr('x', () => {
	    //     return 10;
	    //   });
	  };

	  _proto.changeDataTest = function changeDataTest() {
	    var dataset = [6, 10, 43, 10, 13]; // éè¦å°è¿äºæ°æ®åæé¥¼ç¶å¾çæ°æ®
	    // è®¾ç½®ä¸ä¸ªcolorçé¢è²æ¯ä¾å°ºï¼ä¸ºäºè®©ä¸åçæå½¢åç°ä¸åçé¢è²

	    var colorScale = d3.scaleOrdinal().domain(d3.range(dataset.length)).range(d3.schemeCategory10);
	    var pie = d3.pie();
	    var pieData = pie(dataset);
	    console.log(pieData); // æ°å»ºä¸ä¸ªå¼§å½¢çæå¨
	    // const innerRadius = 0; // ååå¾
	    // const outerRadius = 100; // å¤åå¾

	    var arc_generator = d3.arc().innerRadius(1).outerRadius(100); // transition(this.option.id, [200, 30, 10, 43, 10]);

	    var gs = d3.select("#" + this.option.id); // ç»å¶é¥¼ç¶å¾çåä¸ªæå½¢

	    gs.append('path').attr('fill', function (d, i) {
	      return colorScale(i); // è®¾ç½®é¢è²
	    }); // ç»å¶é¥¼ç¶å¾ä¸é¢çæå­ä¿¡æ¯

	    gs.append('text').attr('transform', function (d) {
	      // ä½ç½®è®¾å¨ä¸­å¿å¤
	      return 'translate(' + arc_generator.centroid(d) + ')';
	    }).attr('text-anchor', 'middle').attr('x', function () {
	      return 0;
	    }).text(function (d) {
	      return d.data;
	    }).transition().delay(1000).duration(1000) // .ease(d3.easeElasticInOut)
	    .attr('x', function () {
	      return 10;
	    });
	  };

	  _proto.changeData = function changeData() {
	    transition(this.option.id, this.randomData(), 130, 100, 30, 0);
	  };

	  _proto.randomData = function randomData() {
	    return this.data.map(function (d) {
	      return {
	        label: d.label,
	        value: 1000 * Math.random(),
	        color: d.color
	      };
	    });
	  };

	  _proto.drawPie = function drawPie() {
	    var d3Obj = d3.select(this.option.selector);
	    d3Obj.selectAll('svg').remove();
	    var svg = d3Obj.append('svg').attr('width', 700).attr('height', 300);
	    svg.append('g').attr('id', this.option.id);
	    draw(this.option.id, this.randomData(), 150, 150, 130, 110, 20, 0); // draw(this.option.id, randomData(), 450, 150, 130, 100, 30, 0);
	  };

	  return Charts3D;
	}();

	return Charts3D;

})));
//# sourceMappingURL=charts-3d.min.js.map
